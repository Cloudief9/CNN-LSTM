Python 3.12.4 | packaged by Anaconda, Inc. | (main, Jun 18 2024, 15:03:56) [MSC v.1929 64 bit (AMD64)]
Type "copyright", "credits" or "license" for more information.

IPython 8.25.0 -- An enhanced Interactive Python.

runfile('D:/data/Python Files/Success2.py', wdir='D:/data/Python Files')
C:\Users\Shivanta Sahoo\anaconda3\Lib\site-packages\keras\src\layers\activations\leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.
  warnings.warn(
Epoch 1/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 266ms/step - accuracy: 0.5845 - loss: 0.8879  
Epoch 1: accuracy improved from -inf to 0.65771, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 472s 284ms/step - accuracy: 0.5845 - loss: 0.8878 - val_accuracy: 0.7754 - val_loss: 0.5018
Epoch 2/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 264ms/step - accuracy: 0.7670 - loss: 0.5075    
Epoch 2: accuracy improved from 0.65771 to 0.77440, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 498s 281ms/step - accuracy: 0.7671 - loss: 0.5075 - val_accuracy: 0.7873 - val_loss: 0.4631
Epoch 3/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 262ms/step - accuracy: 0.7940 - loss: 0.4484  
Epoch 3: accuracy improved from 0.77440 to 0.80283, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 458s 280ms/step - accuracy: 0.7940 - loss: 0.4484 - val_accuracy: 0.8133 - val_loss: 0.4197
Epoch 4/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 263ms/step - accuracy: 0.8248 - loss: 0.3846  
Epoch 4: accuracy improved from 0.80283 to 0.82697, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 459s 280ms/step - accuracy: 0.8248 - loss: 0.3846 - val_accuracy: 0.8132 - val_loss: 0.5607
Epoch 5/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 261ms/step - accuracy: 0.8418 - loss: 0.3498  
Epoch 5: accuracy improved from 0.82697 to 0.84550, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 455s 278ms/step - accuracy: 0.8418 - loss: 0.3498 - val_accuracy: 0.8390 - val_loss: 0.3393
Epoch 6/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 265ms/step - accuracy: 0.8545 - loss: 0.3185  
Epoch 6: accuracy improved from 0.84550 to 0.85965, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 464s 283ms/step - accuracy: 0.8545 - loss: 0.3185 - val_accuracy: 0.8690 - val_loss: 0.2946
Epoch 7/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 270ms/step - accuracy: 0.8732 - loss: 0.2785  
Epoch 7: accuracy improved from 0.85965 to 0.87645, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 471s 287ms/step - accuracy: 0.8732 - loss: 0.2785 - val_accuracy: 0.8735 - val_loss: 0.2826
Epoch 8/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 265ms/step - accuracy: 0.8889 - loss: 0.2466  
Epoch 8: accuracy improved from 0.87645 to 0.88957, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 463s 283ms/step - accuracy: 0.8889 - loss: 0.2466 - val_accuracy: 0.8759 - val_loss: 0.2794
Epoch 9/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 267ms/step - accuracy: 0.9043 - loss: 0.2148  
Epoch 9: accuracy improved from 0.88957 to 0.90380, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 466s 284ms/step - accuracy: 0.9043 - loss: 0.2148 - val_accuracy: 0.8764 - val_loss: 0.2713
Epoch 10/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 265ms/step - accuracy: 0.9219 - loss: 0.1802  
Epoch 10: accuracy improved from 0.90380 to 0.91793, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 465s 284ms/step - accuracy: 0.9219 - loss: 0.1802 - val_accuracy: 0.8842 - val_loss: 0.2668
Epoch 11/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 264ms/step - accuracy: 0.9339 - loss: 0.1562  
Epoch 11: accuracy improved from 0.91793 to 0.93042, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 461s 281ms/step - accuracy: 0.9339 - loss: 0.1562 - val_accuracy: 0.8787 - val_loss: 0.2797
Epoch 12/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 264ms/step - accuracy: 0.9463 - loss: 0.1306  
Epoch 12: accuracy improved from 0.93042 to 0.94278, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 461s 281ms/step - accuracy: 0.9463 - loss: 0.1307 - val_accuracy: 0.8813 - val_loss: 0.2881
Epoch 13/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 266ms/step - accuracy: 0.9594 - loss: 0.1025  
Epoch 13: accuracy improved from 0.94278 to 0.95690, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 466s 284ms/step - accuracy: 0.9594 - loss: 0.1025 - val_accuracy: 0.8829 - val_loss: 0.3054
Epoch 14/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 268ms/step - accuracy: 0.9706 - loss: 0.0752   
Epoch 14: accuracy improved from 0.95690 to 0.96917, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 468s 285ms/step - accuracy: 0.9706 - loss: 0.0752 - val_accuracy: 0.8591 - val_loss: 0.4300
Epoch 15/15
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 0s 273ms/step - accuracy: 0.9771 - loss: 0.0626  
Epoch 15: accuracy improved from 0.96917 to 0.97720, saving model to model_checkpoint.weights.h5
1639/1639 ━━━━━━━━━━━━━━━━━━━━ 476s 291ms/step - accuracy: 0.9771 - loss: 0.0626 - val_accuracy: 0.8731 - val_loss: 0.4405

 
Important
Figures are displayed in the Plots pane by default. To make them also appear inline in the console, you need to uncheck "Mute inline plotting" under the options menu of Plots.
820/820 ━━━━━━━━━━━━━━━━━━━━ 33s 39ms/step  
C:\Users\Shivanta Sahoo\anaconda3\Lib\site-packages\keras\src\layers\activations\leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.
  warnings.warn(
C:\Users\Shivanta Sahoo\anaconda3\Lib\site-packages\keras\src\saving\saving_lib.py:576: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 58 variables. 
  saveable.load_own_variables(weights_store.get(inner_path))
820/820 - 31s - 38ms/step - accuracy: 0.8731 - loss: 0.4405
Restored model, accuracy: 87.31%

2024-07-19 16:37:49.735641: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-07-19 16:37:52.660232: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-07-19 16:38:02.181141: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-07-19 16:38:09.776688: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] remapper failed: INVALID_ARGUMENT: Mutation::Apply error: fanout 'StatefulPartitionedCall/gradient_tape/functional_1/conv2d_1_2/leaky_re_lu_1_1/LeakyRelu/LeakyReluGrad' exist for missing node 'StatefulPartitionedCall/functional_1/conv2d_1_2/add'.


















































